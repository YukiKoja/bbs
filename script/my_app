#!/usr/bin/env perl

use strict;
use warnings;
use DBI;
use Mojolicious::Lite;
use utf8;
use Encode qw/encode decode/;



# Data file (app is Mojolicious object. home is Mojo::Home object)
my $data_file = app->home->rel_file('bbs-data.txt');

# Create entry
post '/create' => sub {
    my $self = shift; # ($self is Mojolicious::Controller object)

  # Form data(This data is Already decoded)
    my $name   = $self->param('name');
    my $message = $self->param('message');

  # Display error page if title is not exist.
  return $self->render(template => 'error', message  => 'Please input name')
      unless $name;

  # Display error page if message is not exist.
  return $self->render(template => 'error', message => 'Please input message')
      unless $message;

  # Check title length
  return $self->render(template => 'error', message => 'Name is too long')
      if length $name > 30;

  # Check message length
  return $self->render(template => 'error', message => 'Message is too long')
      if length $message > 100;

    my $DB_NAME = "hoge";
    my $DB_HOST = "127.0.0.1";
    my $DB_USER = "koja";
    my $DB_PASSWD = "yuki";

my $dbh = DBI->connect("dbi:Pg:dbname=$DB_NAME;host=$DB_HOST", $DB_USER, $DB_PASSWD)
    or die "$!\n Error: failed to connect to DB.\n";
my $sth = $dbh->prepare("
INSERT into test
(name,comment,create_timestamp)
values
(?,?,now())

");
$sth->execute($name,$message);




$dbh->disconnect;

  # Data and time
    my ($sec, $min, $hour, $day, $month, $year) = localtime;
    $month = $month + 1;
    $year = $year + 1900;

  # Format date (yyyy/mm/dd hh:MM:ss)
  my $datetime = sprintf(
    "%04s/%02s/%02s %02s:%02s:%02s",
    $year,
    $month,
    $day,
    $hour,
    $min,
    $sec
      );

  # Delete line breakes
    $message =~ s/\x0D\x0A|\x0D|\x0A//g;

  # Writing data
    my $record = join("\t", $datetime, $name, $message) . "\n";

  # File open to write
  open my $data_fh, ">>", $data_file
      or die "Cannot open $data_file: $!";

  # Encode
    $record = encode('UTF-8', $record);

  # Write
    print $data_fh $record;

  # Close
    close $data_fh;

  # Redirect
    $self->redirect_to('index');

} => 'create';


=comment
  # Open data file(Create file if not exist)
    my $mode = -f $data_file ? '<' : '+>';
  open my $data_fh, $mode, $data_file
      or die "Cannot open $data_file: $!";

  # Read data
    my $entry_infos = [];
    while (my $line = <$data_fh>){
        $line = decode('UTF-8', $line);
        chomp $line;
        my @record = split /\t/, $line;

        my $entry_info = {};
        $entry_info->{datetime} = $record[0];
        $entry_info->{title}    = $record[1];
        $entry_info->{message}  = $record[2];

        push @$entry_infos, $entry_info;
    }

  # Close
    close $data_fh;

  # Reverse data order
    @$entry_infos = reverse @$entry_infos;

=cut

get '/' => sub {
my $self = shift;

my $DB_NAME = "hoge";
my $DB_HOST = "127.0.0.1";
my $DB_USER = "koja";
my $DB_PASSWD = "yuki";

my $dbh = DBI->connect("dbi:Pg:dbname=$DB_NAME;host=$DB_HOST", $DB_USER, $DB_PASSWD)
    or die "$!\n Error: failed to connect to DB.\n";
my $sth = $dbh->prepare("SELECT * FROM test ");
$sth->execute();

    my $entry_infos = [];

while (my $href = $sth->fetchrow_hashref) {

    print $href->{name},"\n";
    print $href->{comment},"\n";
    print $href->{create_timestamp},"\n";

        my $entry_info = {};
        $entry_info->{datetime} = $href->{create_timestamp};
        $entry_info->{name}    = $href->{name};
        $entry_info->{message}  = $href->{comment};

        push @$entry_infos, $entry_info;


}


$dbh->disconnect;
  # Render index page
    $self->render(entry_infos => $entry_infos);


my $clients = {};

 # Client id
  my $cid = "$self";
  
  # Resist controller
  $clients->{$cid}{controller} = $self;
  
  # Receive message
  $self->on('message' => sub {
    my ($self, $message) = @_;
    
    # Send message to all clients
    foreach my $cid (keys %$clients) {
      $clients->{$cid}{controller}->send($message);
    }
  });
  
  # Finish
  $self->on('finish' => sub {
      
    # Remove client
    delete $clients->{$cid};
  });

} => 'index';




app->start;




__DATA__

@@ index.html.ep
% my $url = $self->req->url->to_abs->scheme($self->req->is_secure ? 'wss' : 'ws')->path( '/' );
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" >
    <link rel="stylesheet" type="text/css" href="/mainstyle.css" />
    <title>掲示板</title>

<script type="text/javascript">
    // only load the flash fallback when needed
    if ( !( 'WebSocket' in window ) ) {
      document.write([
        '<scr'+'ipt type="text/javascript" src="web-socket-js/swfobject.js"></scr'+'ipt>',
        '<scr'+'ipt type="text/javascript" src="web-socket-js/FABridge.js"></scr'+'ipt>',
        '<scr'+'ipt type="text/javascript" src="web-socket-js/web_socket.js"></scr'+'ipt>'
      ].join(''));
    }
  </script>
  <script type="text/javascript">
    if ( WebSocket.__initialize ) {
      // Set URL of your WebSocketMain.swf here:
      WebSocket.__swfLocation = 'web-socket-js/WebSocketMain.swf';
    }

    // example copied from web-socket-js/sample.html
    var ws, input, clock;

    function init() {
      
      // Connect to Web Socket.
      ws = new WebSocket('<%= $url %>');
      
      // Receive message
      ws.onmessage = function(e) {
        // Write message
        var message = document.createElement('div');
        message.appendChild(document.createTextNode(e.data));
        var display = document.getElementById( 'display' );
        display.appendChild(message);
      };
    }

    function sendChatMessage() {
      var input = document.getElementById('message-box');
      var message = input.value;
      
      // Send message
      ws.send(message);
      input.value = "";
    }
    
    window.onload = init;
  </script>

  <style type="text/css">


    body{
    text-align:center;
    background:#f0f0f0;
    }

    h1 {
    color:blue;
    font-size:300%;
   }

h1:before {
    content: url(https://cdn3.iconfinder.com/data/icons/blue-ulitto/128/Developer_files_Perl_Sc\
ript-128.png);
    margin: 10px;
    position: relative;
    top: 8px;
}

h1:after {
    content: url(https://cdn3.iconfinder.com/data/icons/blue-ulitto/128/Developer_files_Perl_Sc\
ript-128.png);
    margin: 10px;
    position: relative;
    top: 8px;
}

   div#back {
 width:560px; margin:10px 20px 10px 0px;
float:right;

}

  div#bbs {
   padding-top: 30px;
   width: 390px;
   margin-left: auto;
   margin-right: auto;
   text-align:left;

}


   div#form {
   width: 390px;
   height : 390px;
   }


  div#chat {
  width:150px;
  float:right;
}


div#pagebody{
 width:796px; margin:0 auto;
text-align:left;
background-color:#727272;
}


div#submenu {
width:160px;/*幅の指定*/
margin:10px 10px 10px 25px;/*位置調整（IE6のバグに注意）*/
display:inline;/*IE6のマージン算出のバグ対策*/
float:left;/*サブメニューのカラムを左寄せにする*/
}

/*サブメニューのヘッダ部分（余白調整・背景画像・背景色・文字サイズなど）*/
div#submenu_header {
height:26px; padding:4px 0px 0px 0px;
background-image:url("images/bg_submenu_header.gif");
background-repeat:no-repeat; background-position:top;
background-color:#cccccc;
font-size:90%; font-weight:bold; text-align:center;
}

/*サブメニューのボディ部分（余白調整・背景画像・背景色）*/
ul#submenu_body {
padding-bottom:6px;
background-image:url("images/bg_submenu_footer.gif");
background-repeat:no-repeat; background-position:bottom;
background-color:#cccccc;
}
ul#submenu_body li {
font-size:90%;/*文字サイズを90%にする*/
list-style-type:none;/*リストマーカー無しにする*/
display:inline;/*リスト項目をインライン表示にする*/
}
ul#submenu_body li a {
display:block;/*リンクをブロック表示にする*/
margin:0px 4px 0px 4px;/*サブメニュー項目のマージン*/
padding:2px 0px 2px 20px;/*サブメニュー項目のパディング*/
background-color:#eeeeee;/*サブメニュー項目の背景色*/
text-decoration:none;/*リンクの下線を無くす*/
}

div#main {
width:390px; margin-right:5px; padding-top:10px;
float:left;
}



  </style>


  </head>


<body>

<div id ="pagebody">

<header>
<div align="center">
<h1>掲 示 板</h1>
<hr width="90%">
[<a href="">リンク</a>]
[<a href="">リンク</a>]
[<a href="">リンク</a>]
[<a href="">リンク</a>]
<hr width="90%">
</header>



<div id="submenu">
    <div id="submenu_header">リンク</div>
    <ul id="submenu_body">
    <li><a href="xxx.html">リンク</a></li>
    <li><a href="xxx.html">リンク</a></li>
    <li><a href="xxx.html">リンク</a></li>
    <li><a href="xxx.html">リンク</a></li>
    <li><a href="xxx.html">リンク</a></li>
    <li><a href="xxx.html">リンク</a></li>
    <li><a href="xxx.html">リンク</a></li>
    <li><a href="xxx.html">リンク</a></li>
    <li><a href="xxx.html">リスト</a></li>
    <li><a href="xxx.html">リンク</a></li>
    <li><a href="xxx.html">リンク</a></li>
    <li><a href="xxx.html">リンク</a></li>
    <li><a href="xxx.html">リンク</a></li>
    <li><a href="xxx.html">リンク</a></li>
    <li><a href="xxx.html">リンク</a></li>
    <li><a href="xxx.html">リンク</a></li>
    </ul>
</div>

<div id ="back">



<div id="chat">    <div id="submenu_header">CHAT</div>
<div id="display" style="width:150px; height:200px; border:1px solid black"></div>
<form onsubmit="sendChatMessage(); return false;">
  <input size="16" type="text" id="message-box">
  <input type="submit" onclick="sendChatMessage(); return false;" value=Send >
</div>

<div id ="main">

<div id ="bbs">
    <form method="post" action="<%= url_for('create') %>">
      <div>
        Title
        <input type="text" name="name" >
      </div>
      <div>Message</div>
      <div>
        <textarea name="message" cols="50" rows="10" ></textarea>
      </div>
      <div>
        <input type="submit" value="Post" >
      </div>
    </form>
</div>

    <div id="form">
    <% for my $entry_info (@$entry_infos) { %>
      <div>
        <hr>
        <div style="background-color:#016BFF;">Name: <%= $entry_info->{name} %>
 (<%= $entry_info->{datetime} %>)</div>
        <div style="background-color:#a4a4a4;">Message</div>
    <div style="background-color:#a4a4a4;"><%= $entry_info->{message} %></div>
      </div>
    <% } %>
    </div>
</div>
</div>


</div>
</div>
  </body>
</html>


@@ error.html.ep
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" >
    <title>Error</title>
  </head>
  <body>
    <%= $message %>

  </body>
</html>
